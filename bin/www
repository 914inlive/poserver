#!/usr/bin/env node
'use strict';

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Module dependencies.
 */
let config = require('./config');
let app = require('../app');
let fs = require('fs');
let debug = require('debug')('test:server');
let http = require('http');
let https = require('https');
let ws = require('ws').Server;

/**
 * Create HTTP/HTTPS/WS server.
 */
let httpServer = http.createServer(app);
let httpsServer = https.createServer({
  key: fs.readFileSync(config.ssl.key),
  cert: fs.readFileSync(config.ssl.cert),
}, app);
let wsServer = new ws({server: httpServer});
wsServer.on('connection', (socket) => {
  console.log(`connection`);

  socket.on('message', (msg) => {
    console.log(`received: ${msg}`);
    socket.send(JSON.stringify({answer: 42}));
  });

  socket.on('close', () => {
    console.log('disconnected');
  });

  // Broadcast to everyone else.
  /*wss.clients.forEach(function each(client) {
    if (client !== socket && client.readyState === WebSocket.OPEN) {
      client.send(data);
    }
  });*/
});

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(config.httpPorts[0]);
httpServer.on('error', onError);
httpServer.on('listening', () => {
  let addr = httpServer.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
});

httpsServer.listen(config.httpsPorts[0]);
httpsServer.on('error', onError);
httpsServer.on('listening', () => {
  let addr = httpsServer.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log(`Listening on ${bind}`);
});

